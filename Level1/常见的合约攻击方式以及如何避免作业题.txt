1，什么是重入攻击，它是如何在智能合约中执行的
	重入攻击发生在智能合约在完成所有内部状态更新之前，调用外部合约或发送以太币时，攻击者可以利用这个外部调用的机会重新进入原合约的函数，执行可能未考虑先前未完成的状态变化操作，这种攻击可以导致资金被盗取或者逻辑被错误执行
2，如何防止智能可以中的重入攻击
	使用互斥锁，确保合约函数不会被并行调用
	确保所有状态变更都在进行任何外部调用之前完成
	使用transfer（）和send（）方法而不是底层的call（）方法，因为前两者限制了可用的gas量，防止被篡改
3，DAO攻击是如何发送的，它与重入漏洞有什么关系
	dao攻击发生在一个名为the dao的智能合约中，攻击者利用了重入漏洞，通过反复调用提款函数，在更新用户余额之前多次提前资金，攻击者能够提起超出原始份额的资金，这次攻击导致数百万美元的损失，并最终导致以太坊硬分叉
4，什么是整数溢出和下溢，他们如何影响智能合约
	溢出和下溢发生在执行数学运算时，计算结果超出变量可以存放最大或最小值，在智能合约中，者可以导致未预期的行为，例如资金错误的增加或减少，例如。如果一个计算意外导致下溢，它可能会将减少的值变成非常大的值
5，如何在solidity合约中防止整数溢出和下溢
	可以使用openzeppelin的safemath库来防止溢出和下溢，该库通过所有数学运算提供安全的方法来保证运算安全，例如，safeMath的add和sub方法会自动检查溢出，并在溢出时恢复交易，从而保护合约避免受攻击
6，如何理解solidity中的可见性关键字，并且它们的误用如何导致合约被攻击
	solidity中的可见性关键字包括，public，private，internal和external，它们定义了函数和变量可以被访问的范围，如果合约错误的被错误的标记为public或external它们可能被恶意调用或在不合适的上下文中使用，导致资金损失或状态被不当修改
7，什么时委托调用，和它的风险
	delegatecall时一种在solidity中允许一个合约以自己的存储环境执行另一个合约代码的功能，这种调用方式使得合约可以共享逻辑单保留独立得存储，然而如果不正确使用，它可能会导致合约状态被恶意合约修改，因为delegatecall保留了调用合约得msg.sender和msg.value

8，什么时交易顺序依赖性，它如何被利用进行攻击
	交易顺序依赖性时指合约的执行结果依赖于区块链中交易顺序，攻击者可以通过所谓的前置运行攻击，观察到挂起的交易后，快速发送另一个具有更高gas价格交易，以确保交易先于原始交易执行，从而利用这种依赖性盈利
9，在智能合约中如何安全的处理外部调用
	避免在状态更新前进行外部调用
	总是检查外部调用的返回值
	考虑实施模式，如检查-效果-交互模式，确保在进行任何外部交互前先进行所有状态检测和更新
10，如何利用以太坊的特性来增加智能合约的安全性
	利用以太坊提供的工具和模式，例如使用事件日志来记录重要的状态变更，利用修饰符来重用代码和安全检查，以及用库合约来减少重复代码和提高代码的安全性，同时，采用最新的编程模式，如使用构造函数参数创建合约实例，以避免中间件攻击
11，什么是智能合约中的拒绝服务DOS攻击
	拒绝服务DOS