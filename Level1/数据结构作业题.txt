1,什么情况下应该使用uint或int
	当需要存储整数，如数量或索引时应该用uint或int，uint使用不允许负值的场景如供应量
2，如何选择存储以太坊地址使用的数据结构
	使用address数据来存储以太坊地址，适用于钱包地址或合约地址
3，在核实使用string与bytes
	当存储可变长度的文本数据时使用string，当处理不需要字符编码的原始自己数据使用bytes
4，数组在solidity中的应用场景是什么
	数组用于存储相同类型的元素列表，适用于需要存储多个值的情况，如数字列表或记录状态
5，怎么使用mapping
	mapping用于创建键值对映射，常用于存储关联数据，比如用户余额，他在数据查找方面更高效
6，struct的用途以及实例
	struct允许创建自定义的数据结构，包含多个不同类型字段，适用于复杂数据组合的场景
7，核实使用enum以及好处
	enum用于定义一组命名常量，限制变量的取值范围，适用于有限选项的情况
8，在设计合约时如何考虑存储和gas成本
	选择高效的数据结构以减少存储和执行脚本，例如mapping通常比数字更节省gas成本特别时在大规模数据查找时
9，如何根据访问模式选择数据结构
	根据合约的数据访问频率和类型选择数据结构，频繁变动的数据就更具适用mapping，而静态数据或者顺序访问的数据更适合用数组
10，在复杂合约中选择数据结构的考虑因素有哪些
	需要苹果合约的功能需求，选择可以支持这些哦那个你的数据结构，复杂合约可能需要结合使用多种数据结构，如结合使用struct和mapping
11，如何决定使用固定长度的数组还是动态数组
	如果事先值到数组的最大长度，且这个长度不会改变，使用固定数组可以节省gas费，如果长度会动态变化应该选择动态数组
12，在solidity中使用mapping和array的主要区别以及使用场景是什么
	mapping用于快速查找和更新键值对，适用于账户余额等场景，array适用于元素顺序重要或需要迭代处理的场景
13，如何利用struct在solidity中模拟传统的数据库表
	可以使用struct来自定义的列，然后使用mapping或数组来存储struct实例，模拟行的概念
14，solidity中enum如何帮助降低错误的发生
	enum限制变量的取值范围，减少非法值输入，提高代码得可维护和错误预判。
15，为何bytes类型有时比string更优
	当处理不需要字符处理功能得纯二进制数据时，bytes类型更节省空间和gas成本，因为它不涉及utf-8编码处理
16，如何选择solidity中存储时间得最佳数据结构
	使用uint256来存储时间戳是最常见得方法，因为它可以直接与eth虚拟机的时间函数兼容
17，在solidity合约中，何时应该考虑数据封装在struct内部
	当数据项逻辑上属于同一实体或需要一起处理时，应将它们封装一个struct内部以增加可读性和可维护性
18，mapping类型是否支持迭代，如果不支持如何解决
	mapping本身不支持迭代，如果需要迭代，可以维护一个单独的数组来存储所有键，然后通过这些键来访问mapping
19，在设计一个包含多种资产类型的钱包合约时，应使用哪种数据机构
	可以使用mapping将资产类型映射到另一个mapping后者将用户地址映射到余额
20，使用enum定义状态时，应如何处理状态的转换逻辑
	定义状态转换的函数中应包含验证逻辑，确保合约状态安预约按预定流程转换